<?xml version="1.0" encoding="utf-8" ?>
<opc:ModelDesign
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
xmlns:xsd="http://www.w3.org/2001/XMLSchema"
xmlns:opc="http://opcfoundation.org/UA/ModelDesign.xsd"
xmlns:ua="http://opcfoundation.org/UA/"
xmlns:uax="http://opcfoundation.org/UA/2008/02/Types.xsd"
xmlns="http://opcfoundation.org/TripleH"
TargetNamespace="http://opcfoundation.org/TripleH"
>

  <opc:Namespaces>
    <opc:Namespace Name="OpcUa" Prefix="Opc.Ua" XmlNamespace="http://opcfoundation.org/UA/2008/02/Types.xsd">http://opcfoundation.org/UA/</opc:Namespace>
    <opc:Namespace Name="TripleH" Prefix="TripleH">http://opcfoundation.org/TripleH</opc:Namespace>
  </opc:Namespaces>

  <!--
  Define generic base types for the various controllers, sensors and actuators used in the model.
  -->


    <opc:ObjectType SymbolicName="GenericMotorType" BaseType="ua:BaseObjectType">
		<opc:Description>A generic motor.</opc:Description>
		<opc:Children>
			<opc:Variable SymbolicName="Direction" DataType="ua:Integer" ValueRank="Scalar" TypeDefinition="ua:AnalogItemType" AccessLevel="ReadWrite" />
			<opc:Variable SymbolicName="setSpeed" DataType="ua:Integer" ValueRank="Scalar" TypeDefinition="ua:AnalogItemType" AccessLevel="ReadWrite" />
			<opc:Variable SymbolicName="outputSpeed" DataType="ua:Integer" ValueRank="Scalar" TypeDefinition="ua:AnalogItemType" AccessLevel="ReadWrite" />
			<opc:Variable SymbolicName="outputCurrent" DataType="ua:Integer" ValueRank="Scalar" TypeDefinition="ua:AnalogItemType" AccessLevel="ReadWrite" />
			<opc:Variable SymbolicName="outputVoltage" DataType="ua:Integer" ValueRank="Scalar" TypeDefinition="ua:AnalogItemType" AccessLevel="ReadWrite" />
			<opc:Variable SymbolicName="Torque" DataType="ua:Integer" ValueRank="Scalar" TypeDefinition="ua:AnalogItemType" AccessLevel="ReadWrite" />
		</opc:Children>
	</opc:ObjectType>
 
<!--
  Define concrete types for the various controllers, sensors and actuators used in the model.
  -->

  <opc:ObjectType SymbolicName="ThreePharesMotor" BaseType="GenericMotorType">
    <opc:Description>An motor for moving finished product.</opc:Description>
  </opc:ObjectType>

  	<!--
  Define concrete types for the components contained in the Batch Plant.
  These middle tier types could be omitted and declared as folders within the boiler type.
  However, doing so would not produce a strongly typed class.
  -->

  	<opc:ObjectType SymbolicName="ConveyorType" BaseType="ua:FolderType">
		<opc:Children>

			<opc:Object SymbolicName="Motor1" TypeDefinition="ThreePharesMotor" SupportsEvents="true">
				<opc:BrowseName>Motor01</opc:BrowseName>
					<opc:Children>
						<opc:Variable SymbolicName="Direction" />
						<opc:Variable SymbolicName="setSpeed" />
						<opc:Variable SymbolicName="outputSpeed" />
						<opc:Variable SymbolicName="outputCurrent" />
						<opc:Variable SymbolicName="outputVoltage" />
						<opc:Variable SymbolicName="Torque" />
					</opc:Children>
			</opc:Object>			

			<opc:Object SymbolicName="Motor2" TypeDefinition="ThreePharesMotor" SupportsEvents="true">
				<opc:BrowseName>Motor02</opc:BrowseName>
					<opc:Children>
						<opc:Variable SymbolicName="Direction" />
						<opc:Variable SymbolicName="setSpeed" />
						<opc:Variable SymbolicName="outputSpeed" />
						<opc:Variable SymbolicName="outputCurrent" />
						<opc:Variable SymbolicName="outputVoltage" />
						<opc:Variable SymbolicName="Torque" />
					</opc:Children>
			</opc:Object>			

		</opc:Children>
		<opc:References>

			<opc:Reference>
				<opc:ReferenceType>ua:HasNotifier</opc:ReferenceType>
				<opc:TargetId>ConveyorType_Motor1</opc:TargetId>
			</opc:Reference>

			<opc:Reference>
				<opc:ReferenceType>ua:HasNotifier</opc:ReferenceType>
				<opc:TargetId>ConveyorType_Motor2</opc:TargetId>
			</opc:Reference>

		</opc:References>
	</opc:ObjectType>
    


    
<!--
  Declare the batch plant type along with all of the references between the different components.
  Adding references between components requires that they be overriden. 
  Overridden nodes only need to delcare the correct NodeType and the SymbolicName; all other
  parameters are initialized from the original declaration. Any parameters that are explicitly
  specified replace the original declaration and are used even if the original declaration
  is changed.
  
  References are specified by constructing the SymbolicIds for the components by inserting
  a '_' between each SymbolicName. This means that a '_' cannot be part of a SymbolicName.
  -->
  	<opc:ObjectType SymbolicName="TripleHType" BaseType="ua:BaseObjectType" SupportsEvents="true">
		<opc:Description>an object.</opc:Description>
		<opc:Children>

            <opc:Object SymbolicName="Conveyor" TypeDefinition="ConveyorType" SupportsEvents="true">
				<opc:BrowseName>Conveyor01</opc:BrowseName>
			</opc:Object>

			
			<opc:Method SymbolicName="StartProcess" ModellingRule="Mandatory"></opc:Method>
            <opc:Method SymbolicName="StopProcess" ModellingRule="Mandatory"></opc:Method>

		</opc:Children>

		<opc:References>
	
            <opc:Reference>
				<opc:ReferenceType>ua:HasNotifier</opc:ReferenceType>
				<opc:TargetId>TripleHType_Conveyor</opc:TargetId>
			</opc:Reference>

		</opc:References>

	</opc:ObjectType>
	<!--
  Declare an instance of a Hydrogen Machine.
  Normally instances are created by program logic instead of being part of the model.
  This is provided as an example of how to do it when there is a need for persistent instances.
  Note that the DisplayNames are overridden for the base level nodes.
  -->
	<opc:Object SymbolicName="TripleH1" TypeDefinition="TripleHType" SupportsEvents="true">
		<opc:BrowseName>Triple-H Server</opc:BrowseName>
		<opc:Children>

            <opc:Object SymbolicName="Conveyor" TypeDefinition="ConveyorType" SupportsEvents="true">
				<opc:DisplayName>Conveyor01</opc:DisplayName>
			</opc:Object>

		</opc:Children>

		<!--
    Link the instance back to the ObjectsFolder
    -->
		<opc:References>
			<opc:Reference IsInverse="true">
				<opc:ReferenceType>ua:Organizes</opc:ReferenceType>
				<opc:TargetId>ua:ObjectsFolder</opc:TargetId>
			</opc:Reference>
		</opc:References>

	</opc:Object>

</opc:ModelDesign>
